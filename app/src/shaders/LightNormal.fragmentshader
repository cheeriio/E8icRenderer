#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

out vec3 color;

uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition;

void main() {
	vec3 LightColor = vec3(1, 1, 1);
	float LightPower = 500.0f;
	
	vec3 MaterialDiffuseColor = texture(DiffuseTextureSampler, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

	vec3 TextureNormal_tangentspace = normalize(texture(NormalTextureSampler, UV).rgb * 2.0 - 1.0);
	
	float distance = length( LightPosition - Position_worldspace );

	vec3 n = TextureNormal_tangentspace;
	vec3 l = normalize(LightDirection_tangentspace);

	float cosTheta = clamp(normalize(dot(Normal_cameraspace, LightDirection_cameraspace)), 0, 1);

	vec3 E = normalize(EyeDirection_tangentspace);
	vec3 R = reflect(-l, n);

	vec3 halfway_vector = normalize(E + l);
    float spec = pow(max(dot(n, halfway_vector), 0.0), 225.0f);
	
	color = 
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
		MaterialSpecularColor * LightColor * LightPower * spec / (distance * distance);
}